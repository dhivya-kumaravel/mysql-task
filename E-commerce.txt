                                         ***CREATING DATABASE AND TABLES TO MANAGE A SIMPLE E-COMMERCE SYSTEM***

1. Creating database as e-commerce:
       
            -> CREATE DATABASE ecommerce;

The above query is used to create a database.

2. Creating customer table: We need to choose at which database, the table should be created. To create table, use create table query with table name and then give column name with size and type.

            -> use ecommerce;
            -> CREATE TABLE customer
            (id INT(30) NOT NULL  AUTO_INCREMENT ,
             customer_name VARCHAR(25) NOT NULL, 
             email VARCHAR(20) NOT NULL, 
             address VARCHAR(50) NOT NULL, 
             PRIMARY KEY(id))ENGINE = INNODB;

2.1. Giving data to the table:

            -> INSERT INTO customer 
           (id, customer_name, email, address) VALUES (NULL, "Customer A", "customerA@order.com", "customerA-Address"), 
           (NULL, "Customer B", "customerB@order.com", "customerB-Address"), 
           (NULL, "Customer C", "customerC@order.com", "customerC-Address");

3. Creating orders table: 
            
            -> CREATE TABLE orders
            (id INT(30) NOT NULL  AUTO_INCREMENT , 
             customer_id INT(25) NOT NULL, 
             order_date VARCHAR(20) NOT NULL, 
             total_amount INT(5) NOT NULL,
             PRIMARY KEY(id));

3.1. Giving data to the table: For giving data, we should use insert into with table name and type the column name orderly and give data orderly.

            -> INSERT INTO orders 
           (id, customer_id, order_date, total_amount) VALUES (NULL, "1", "01-10-2024", "1000"), 
           (NULL, "2", "02-10-2024", "2000"), 
           (NULL, "3", "03-10-2024", "1500"),
(NULL, "2", "02-10-2024", "2000"),
(NULL, "1", "01-10-2024", "1500"), 
           (NULL, "2", "02-10-2024", "900"), 
           (NULL, "3", "03-10-2024", "800"),
(NULL, "2", "02-10-2024", "2000");


4. Creating products table:
            
           -> CREATE TABLE product
              (id INT(30) NOT NULL  AUTO_INCREMENT, 
              product_name VARCHAR(20) NOT NULL, 
              price INT(25) NOT NULL, 
              description VARCHAR(5) NOT NULL, 
              PRIMARY KEY(id));

4.1. Giving data to the table:

            -> INSERT INTO product
           (id, product_name, price, description) VALUES (NULL, "Product-A", "1000", "XXXXX"), 
           (NULL, "Product-B", "2000", "YYYYY"), 
           (NULL, "Product-C", "1500", "ZZZZZ");



5. Retrieve all customers who have placed an order in the last 30 days: Here all customers placed order, so, i just retrive all the customers.
          
          -> SELECT * FROM customer 
             LIMIT 30;

6. Get the total amount of all orders placed by each customer:

          -> SELECT total_amount FROM orders;

7. Update the price of Product C to 45.00.

          -> SELECT * FROM product; (This is used to get all data from the table)

          -> UPDATE product SET price = '45.00' WHERE id=3; (To update the data, use update and set query)

8. Add a new column discount to the products table:

          -> ALTER TABLE product
          ADD column Discounts VARCHAR(5) NOT NULL;

          -> INSERT INTO product
           (id, name, price, description, Discounts) VALUES 
           (NULL, "Product-D", "5300", "WWWWWW", "0%");
           (NULL, "Product-E", "5300", "BBBB", "12%");
           (NULL, "Product-F", "5300", "AAAAA", "5%"); 
 
          -> SELECT * FROM product;

9. Retrieve the top 3 products with the highest price:

           -> SELECT * FROM product WHERE price > 1000 LIMIT 3;

10. Get the names of customers who have ordered Product A:
 
          -> SELECT customer_id FROM orders WHERE id=1;
 
          -> SELECT name FROM customer WHERE id=1;

11. Join the orders and customers tables to retrieve the customer's name and order date for each order:

          -> SELECT orders.*, customer.name FROM orders
           LEFT JOIN customer
           on orders.id=customer.id;

12. Retrieve the orders with a total amount greater than 150.00:
 
          -> SELECT * FROM ORDERS WHERE total_amount >150;

13. Normalize the database by creating a separate table for order items and updating the orders table to reference the order_item table:

           -> CREATE TABLE order_item 
           (customer_id INT(25) NOT NULL, order_items VARCHAR(30) NOT NULL, total_cots VARCHAR(10) NOT NULL);

           ->INSERT INTO order_item
           (customer_id, order_items) VALUES ("1", "2"), 
           ("2", "3"), 
           ("3", "2");

   Here, order_items column shows a number of items ordered by the customers. So, by using the customer_id, we can know how many items ordered by each customer. We can avoid multiple appearance of data. We can know the total amount also.

            
14. Retrieve the average total of all orders:

            ->SELECT AVG(total_amount) FROM orders;
 

         

           






